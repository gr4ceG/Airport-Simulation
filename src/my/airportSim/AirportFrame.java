/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.airportSim;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import javax.swing.JTextArea;
import javax.swing.Timer;

/**
 * Author: Grace Guo 
 * Class: ICS4UE-51
 * Program: Airport Simulation 
 * Summary: The program simulates an airport. The airport can enter new flights for 
 * landing and takeoff, and the airport will simulate scheduled airport takeoffs and 
 * landings. 
 */
public class AirportFrame extends javax.swing.JFrame {
    
    //Files for arriving and takeoff flights
    private static File arrivals = new File ("arrivals.txt"); 
    private static File takeoffs = new File ("takeoffs.txt"); 
    private static Scanner reader; //scanner for 
    
    //Queues storing arrival and takeoff flights
    public static Queue<Integer> landing = new LinkedList<Integer>(); 
    public static Queue<Integer> takeOff = new LinkedList<Integer>(); 
    
    int tDuration = 600; //duration of timer (in milliseconds) 
    
    int newArriveFlight; //incoming flight number for landing 
    int newTakeOffFlight; //incoming flight number for takeoff
    
    int flightStage = 0; //stage 0 = landing, stage 1 = takeoff
    int numLandings = 0; //number of aiplanes landed 
    int numTakeoffs = 0; //number of airplanes taken off 
    
    int count = 0;

    String display = "";
    
    Timer timer = new Timer(tDuration, new TimerListener()); 

    /**
     * Creates new form AirportFrame
     */
    public AirportFrame() {
        initComponents();
        
        //reading files and loading data into queue 
        readFiles(arrivals, landing); 
        readFiles(takeoffs, takeOff);
        
        //update the text area display 
        updateQueue(takeOff, -1, takeoffTxtArea); 
        updateQueue(landing, -1, ArrivalTxtArea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        displayLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ArrivalTxtArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        takeoffTxtArea = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ArriveTxtfield = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TakeoffTxtfield = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        InvalidInput = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        jLabel1.setText("Airport Simulator");

        displayLabel.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        displayLabel.setText("Press 'Start' to begin simulation.");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel3.setText("Arrivals");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel4.setText("Takeoffs");

        ArrivalTxtArea.setEditable(false);
        ArrivalTxtArea.setColumns(20);
        ArrivalTxtArea.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        ArrivalTxtArea.setRows(5);
        ArrivalTxtArea.setFocusable(false);
        jScrollPane1.setViewportView(ArrivalTxtArea);

        takeoffTxtArea.setEditable(false);
        takeoffTxtArea.setColumns(20);
        takeoffTxtArea.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        takeoffTxtArea.setRows(5);
        takeoffTxtArea.setFocusable(false);
        jScrollPane2.setViewportView(takeoffTxtArea);

        startButton.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        startButton.setText("START");
        startButton.setFocusable(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel5.setText("Arriving Flight: ");

        ArriveTxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArriveTxtfieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel6.setText("Takeoff Flight:");

        TakeoffTxtfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TakeoffTxtfieldActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        exitButton.setText("Exit");
        exitButton.setFocusable(false);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(displayLabel)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(1, 1, 1)
                                .addComponent(ArriveTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TakeoffTxtfield))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(InvalidInput, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(50, 50, 50))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(displayLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(startButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(97, 97, 97)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(ArriveTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(TakeoffTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitButton)
                            .addComponent(InvalidInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        timer.restart(); 
        restart(); 
    }//GEN-LAST:event_startButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_exitButtonActionPerformed

    private void ArriveTxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArriveTxtfieldActionPerformed
        try{
            //revert inputted arrival flight number into an integer 
            newArriveFlight = Integer.parseInt(ArriveTxtfield.getText()); 
            
            updateQueue(landing, newArriveFlight, ArrivalTxtArea); //update arrivals queue
            ArriveTxtfield.setText(""); //clear arrival textbox 
            InvalidInput.setText(""); 
            
        }catch(NumberFormatException e){ //invalid flight number
            InvalidInput.setText("Please enter a valid Flight Number for Arrival");  
            ArriveTxtfield.setText(""); //clear arrival textbox 
        }
    }//GEN-LAST:event_ArriveTxtfieldActionPerformed

    private void TakeoffTxtfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TakeoffTxtfieldActionPerformed
        try{
            //revert inputted takeoff flight number into an integer 
            newTakeOffFlight = Integer.parseInt(TakeoffTxtfield.getText());
            
            updateQueue(takeOff, newTakeOffFlight, takeoffTxtArea); //update takeoff queue
            TakeoffTxtfield.setText(""); //clear takeoff textbox 
            InvalidInput.setText("");
            
        }catch(NumberFormatException e){ //invalid flight number 
            InvalidInput.setText("Please enter a valid Flight Number for Takeoff"); 
            TakeoffTxtfield.setText("");//clear takeoff textbox
        }  
    }//GEN-LAST:event_TakeoffTxtfieldActionPerformed

    private void readFiles(File textFile, Queue queue){//Reading files 
        try{
            reader = new Scanner(textFile); //creating scanner for specified file 
            
            while(reader.hasNext()){
                queue.add(Integer.parseInt(reader.nextLine()));//load file data into queue
            }
        }catch(FileNotFoundException ex){
            
        }
        reader.close();//close scanner object 
    }  
    
    private class TimerListener implements ActionListener{
        
        @Override
        public void actionPerformed(ActionEvent ae){
            
            if (!landing.isEmpty() || !takeOff.isEmpty()){ //airplanes in queue pending to land or takeoff 
                if (flightStage == 0) {//turn for pending airplanes to land 
                    if (numLandings < 2) {//less than two planes have landed 
                        if (landing.isEmpty()) {//landing queue is empty
                            flightStage = 1; //give turn for pending airplanes to takeoff 
                        } else {
                            if (count < 4) {//count is less than 4
                                //shows next pending flight to land 
                                display = "Flight " + landing.peek() + " will land in " + (4 - count);
                                count++;
                            } else {
                                //shows pending flight has landed
                                display = "Flight " + landing.remove() + " has landed!";

                                count = 0; //timer counter 
                                numLandings++;
                            }
                        }
                    } else {//two planes have landed 
                        flightStage = 1; //give turn for pending airplanes to takeoff 
                        numLandings = 0;
                    }
                } else {//give turn for pending airplanes to takeoff
                    if (numTakeoffs < 1) {//no airplanes have taken off 
                        if (takeOff.isEmpty()) {//takeoff queue is empty
                            flightStage = 0; //give turn for pending airplanes to land
                        } else {
                            if (count < 2) {
                                //shows next pending flight to take off
                                display = "Flight " + takeOff.peek() + " will take off in " + (2 - count);
                                count++;
                            } else {
                                //shows pending flight has taken off
                                display = "Flight " + takeOff.remove() + " has took off!";

                                count = 0; //timer counter 
                                numTakeoffs ++; 
                            }
                        }
                    }else{//a plane has taken off 
                        flightStage = 0; //give turn for pending airplanes to land
                        numTakeoffs = 0; 
                    }
                }
            }

            displayLabel.setText(display); //show flight status 
            //update text area 
            
            updateQueue(takeOff, -1, takeoffTxtArea); 
            updateQueue(landing, -1, ArrivalTxtArea);
        }
    }
    
    //method for updating queue
    private void updateQueue(Queue inputQueue, int newFlight, JTextArea area){ 
        int curFlight;
        
        if(newFlight > 0){//add flight into queue
            inputQueue.add(newFlight);
        }
        
        //updating display area 
        area.setText(""); //clear text area 
        for(int i = 0; i < inputQueue.size(); i++){
            curFlight = (int) inputQueue.remove(); //store flight numbers from queue
            
            area.append(Integer.toString(curFlight) + "\n"); //append flight numbers in queue to text area 
            inputQueue.add(curFlight); //load flight number back into queue
        }
    }
    
    public void restart(){//restarting the simulation 
        //clearing all queues
        landing.clear(); 
        takeOff.clear(); 
        
        //reloading data from files into queues 
        readFiles(arrivals, landing); 
        readFiles(takeoffs, takeOff);
        //update the display area 
        updateQueue(takeOff, -1, takeoffTxtArea); 
        updateQueue(landing, -1, ArrivalTxtArea);
        
        //restart all counters 
        count = 0; 
        numLandings = 0; 
        numTakeoffs = 0; 
        
        //restart from landing stage 
        flightStage = 0; 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirportFrame().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ArrivalTxtArea;
    private javax.swing.JTextField ArriveTxtfield;
    private javax.swing.JLabel InvalidInput;
    private javax.swing.JTextField TakeoffTxtfield;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton startButton;
    private javax.swing.JTextArea takeoffTxtArea;
    // End of variables declaration//GEN-END:variables
}
